2-3树是一棵绝对平衡的树(左右子树的深度一致)
融合  ---->分离  无null节点 绝对

红色节点表示与父亲节点相连的边是红色   ---->该节点与父亲节点组成一个3节点
红黑树   ----->黑平衡二叉树(2-3树保持绝对平衡)


AVL 树与红黑树性能比较及适用情况
性能比较
    高度平衡：
        AVL 树：严格保持左右子树高度差不超 1，高度平衡，查找时间复杂度稳定。
        红黑树：靠颜色和规则大致平衡，平均树高略高，查找，某些情况略逊。
    插入删除：
        AVL 树：操作可能致较多旋转，最坏次，总体，频繁操作性能受影响。
        红黑树：旋转相对少，靠颜色调整和少量旋转保持平衡，时间复杂度，实际中性能常更优。
    空间复杂度：
        AVL 树：维护平衡或需额外空间存高度信息，复杂度较高。
        红黑树：只需设颜色属性，复杂度较低。
适用情况
    AVL 树：
    注重查找：如数据库关键索引，对查找速度要求极高场景。
    数据稳定：数据少变动，多查找操作，如配置文件索引。
    红黑树：
    动态操作多：如操作系统进程调度、内存管理模块。
    空间要求高：如嵌入式系统、移动设备等资源受限环境。